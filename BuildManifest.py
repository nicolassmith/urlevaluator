#!/usr/bin/env python
"""
SYNOPSIS

    BuildManifest path/to/AndroidManifest.xml

DESCRIPTION

    Regenerates the manifest for urlevaluator.

AUTHOR

    Leo C. Stein
    leo.stein@gmail.com

VERSION

    0.3
"""

import sys, string
from string import Template
from urllib2 import Request, urlopen, URLError
import xml.etree.ElementTree as ET

EXTRAS_FILE   = 'ExtraShorteners.txt'
DOMAIN_FMT    = '''\
                <data android:scheme="http"  android:host="${domain}" android:pathPattern=".*" />
                <data android:scheme="https" android:host="${domain}" android:pathPattern=".*" />'''
SERVICE_URL   = 'http://api.longurl.org/v2/services'

""" These are sentinel values which tell us where to splice """
START_COMMENT = '<!-- start-autogenerated -->'
END_COMMENT   = '<!-- end-autogenerated -->'

def formOne(domain):
    """ Format the intents for one host. """
    
    t = Template(DOMAIN_FMT)
    return t.substitute(domain=domain)

def formMany(domains):
    """ Returns a string for several hosts, to splice into the manifest. """

    return string.join(map(formOne, domains), '\n')    # Simply concatenate with newlines

def fetchDomains():
    """ We get the list of domains from longurl.org """
    
    req = Request(SERVICE_URL)
    try:
        response = urlopen(req)
    except URLError as e:
        if hasattr(e, 'reason'):
            print 'We failed to reach a server.'
            print 'Reason: ', e.reason
        elif hasattr(e, 'code'):
            print 'The server couldn\'t fulfill the request.'
            print 'Error code: ', e.code
        sys.exit(-1)
    else:
        # everything is fine
        xmlstr = response.read()
        
        tree = ET.fromstring(xmlstr)
        services = tree.findall('.//service')
        return [s.text for s in services if s.attrib['regex']=='']

def readExtraDomains():
    """ Loads from file extra shorteners that we like. """
    
    f = open(EXTRAS_FILE,'r')
    domains = [l.rstrip() for l in f.readlines()]
    f.close()
    return domains

def readManiSplitOnComments(filename):
    """  Reads the manifest from filename.
    Returns a tuple of (first, last) parts of the file,
    where the data should be spliced in between. """

    f = open(filename)
    contents = f.read()
    (first, rest) = string.split(contents, START_COMMENT)
    (middle, last) = string.split(rest, END_COMMENT)
    f.close()

    return (first, last)

def main(filename):
    """ Entry point for the script. """

    domains = fetchDomains()
    extraDomains = readExtraDomains()
    allDomains = sorted(set(domains + extraDomains))
    print str(len(allDomains)) + " domains supported."

    (first, last) = readManiSplitOnComments(filename)

    newMani = first + START_COMMENT + '\n' + \
        formMany(allDomains) + '\n' + \
        '                ' + END_COMMENT + last

    f = open(filename, mode='w')
    f.write(newMani.encode('UTF-8'))
    f.close()

if __name__ == '__main__':
    main(sys.argv[1])

